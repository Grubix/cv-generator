// ---- Mixins and funcitons ---- //

@mixin pseudo($position: absolute, $display: block, $content: "") {
    position: $position;
    display: $display;
    content: $content;
}

@mixin variant($selector) {
    @at-root #{$selector}#{&} {
        @content;
    }
}

@mixin input-placeholder {
    &.placeholder { @content; }
    &:-moz-placeholder { @content; }
    &::-moz-placeholder { @content; }
    &:-ms-input-placeholder { @content; }
    &::-webkit-input-placeholder { @content; }
}

@mixin font-face($font-name, $file-name, $weight: normal, $style: normal) {
    @font-face {
        font-family: quote($font-name);
        src: url($file-name + '.eot');
        src: url($file-name + '.eot?#iefix')  format('embedded-opentype'),
        url($file-name + '.woff') format('woff'),
        url($file-name + '.ttf')  format('truetype'),
        url($file-name + '.svg##{$font-name}')  format('svg');
        font-weight: $weight;
        font-style: $style;
    }
}

@mixin flex-center() {
    display: flex;
    align-items: center;
    justify-content: center;
}

@mixin stretch($margin: 0) {
    top: $margin;
    right: $margin;
    bottom: $margin;
    left: $margin;
}

@mixin flex($aling-items: center, $justify-content: center) {
    display: flex;
    align-items: $aling-items;
    justify-content: $justify-content;
}

@mixin removeScrollbar() {
    -ms-overflow-style: none;
    scrollbar-width: none;

    &::-webkit-scrollbar {
        display: none;
    }
}

@function fill($item-count, $spacing: 0, $margin: $spacing) {
    $percent-value: 100% / $item-count;
    $fixed-value: (($item-count - 1) * $spacing + 2 * $margin) / $item-count;

    @return #{"calc("}$percent-value#{" - "}$fixed-value#{")"};
}

@function fill-flex($item-count, $spacing: 0) {
    $percent-value: 100% / $item-count;
    $fixed-value: 2 * $spacing;

    @return #{"calc("}$percent-value#{" - "}$fixed-value#{")"};
}

@mixin triangle($direction, $bakcground, $base, $height: $base * 1.732 / 2) {
    @if not index(top right bottom left, $direction) {
        @error "Direction must be either 'top', 'right', 'bottom' or 'left'.";
    }
  
    border-#{opposite-direction($direction)}: $height + unquote("px") solid $bakcground;

    @if ($direction == top OR $direction == bottom) {
        border-left: $base / 2 + unquote("px") solid transparent;
        border-right: $base / 2 + unquote("px") solid transparent;
    } @else {
        border-top: $base / 2 + unquote("px") solid transparent;
        border-bottom: $base / 2 + unquote("px") solid transparent;
    }
}

@function opposite-direction($direction) {
    @if not index(top right bottom left, $direction) {
        @error "Direction must be either 'top', 'right', 'bottom' or 'left'.";
    }

    @if ($direction == top) {
        @return bottom;
    } @else if ($direction == right) {
        @return left;
    } @else if ($direction == bottom) {
        @return top;
    } @else {
        @return right;
    }
}
